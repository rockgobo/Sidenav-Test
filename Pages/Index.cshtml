@page

@{
    //TODO Algorithmus für eine Selected Route einbauen
    List<NepsSidenav.Model.MenuNode> buildTree(int deapth, int count, int currentDeapth = 0)
    {
        List<NepsSidenav.Model.MenuNode> nodes = new List<NepsSidenav.Model.MenuNode>();
        for (int i = 0; i < count; ++i)
        {
            nodes.Add(new Model.MenuNode()
            {
                Id = i,
                Breadcrumb = true,
                Depth = currentDeapth,
                Selected = false,
                First = i == 0 ? true : false,
                Last = i == count - 1 ? true : false,
                Children = (deapth > currentDeapth) ? buildTree(deapth, count, currentDeapth + 1) : new List<NepsSidenav.Model.MenuNode>()
            });
        }

        return nodes;
    }
    var root = buildTree(2, 5, 0);
}

@{
    void RenderNodes(IList<NepsSidenav.Model.MenuNode> nodes, string id)
    {
        if (nodes.Count > 0)
        {
            int index = 0;
            <div>
                @foreach (var node in nodes)
                {

                    index++;

                    var divGroup = id + "_" + index;

                    var cssClasses = new List<string>();

                    var expandedClass = "expandNode";
                    var openChildren = false;
                    if (node.Breadcrumb && !node.Selected)
                    {
                        expandedClass = "collapseNode";
                        openChildren = true;
                    }

                    if (node.First)
                    {
                        cssClasses.Add("first");
                    }

                    if (node.Last) { cssClasses.Add("last"); }
                    if (node.Selected) { cssClasses.Add("selected active"); }


                    var classString = new Microsoft.AspNetCore.Html.HtmlString((cssClasses.Count == 0) ? "" : (" class=\"" + String.Join(" ", cssClasses.ToArray()) + "\""));



                    <div @classString>
                        @if (node.Enabled)
                        {
                            var imActive = "";
                            if (node.Selected)
                            {
                                imActive = "imActive";
                            }

                            <div class="node level-@node.Depth @imActive">
                                <a href="@node.Url">@node.Text</a>
                                @if (node.Children.Count > 0)
                                {
                                    var showUp = "sidebar__toggle--show";
                                    var showDown = "sidebar__toggle--hide";
                                    if (openChildren)
                                    {
                                        showUp = "sidebar__toggle--hide";
                                        showDown = "sidebar__toggle--show";
                                    }

                                    <span id="children_@id" type="button" class="sidebar__toggle float-right">
                                        <div class="sidebar__toggle__iconup @showUp">
                                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-caret-down-fill" fill="white" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                                            </svg>
                                        </div>
                                        <div class="sidebar__toggle__icondown @showDown">
                                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-caret-up-fill" fill="white" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M7.247 4.86l-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z" />
                                            </svg>
                                        </div>
                                    </span>
                                }
                            </div>
                        }
                        @if (node.Children.Count > 0)
                        {
                            <div class="children_@id @expandedClass">
                                @{ RenderNodes(node.Children, divGroup); }
                            </div>
                        }

                    </div>
                }
            </div>
        }
    }
}

<div class="SideNavContainer">
    @{ RenderNodes(root, "0"); }

</div>

<script>
    window.onload = function loadmyNav() {
        $('.sidebar__toggle').click(function () {
            $(this).parent().next().toggle();

            //toggle Icon
            if ($(this).children('.sidebar__toggle__iconup').hasClass('sidebar__toggle--show')) {
                $(this).children('.sidebar__toggle__iconup').removeClass('sidebar__toggle--show');
                $(this).children('.sidebar__toggle__iconup').addClass('sidebar__toggle--hide');
                $(this).children('.sidebar__toggle__icondown').removeClass('sidebar__toggle--hide');
                $(this).children('.sidebar__toggle__icondown').addClass('sidebar__toggle--show');
            }
            else {
                $(this).children('.sidebar__toggle__iconup').addClass('sidebar__toggle--show');
                $(this).children('.sidebar__toggle__iconup').removeClass('sidebar__toggle--hide');
                $(this).children('.sidebar__toggle__icondown').addClass('sidebar__toggle--hide');
                $(this).children('.sidebar__toggle__icondown').removeClass('sidebar__toggle--show');

            }
        })
    };

</script>